#!/usr/bin/env python3
"""
A command line interface to the broadlink library for executing common actions to control and interact with Broadlink devices
"""

import argparse
import base64
import os
import json
import sys
import time
from typing import List

import broadlink
from broadlink.const import DEFAULT_PORT
from broadlink.exceptions import ReadError, StorageError
from broadlink.remote import data_to_pulses, pulses_to_data

DEFAULT_TIMEOUT = 30 # seconds
DEFAULT_DEVICE = 0x2712


def auto_int(x) -> int:
    """Parse the given value to an integer"""
    return int(x, 0)

def auto_hex(x) -> bytearray:
    """Parse the given hex string to a byte array"""
    return bytearray.fromhex(x)


def format_pulses(pulses: List[int]) -> str:
    """Concatentate the list of pulses"""
    return " ".join(
        f"+{pulse}" if i % 2 == 0 else f"-{pulse}"
        for i, pulse in enumerate(pulses)
    )

def parse_pulses(data: List[str]) -> List[int]:
    """Parse pulses."""
    return [abs(int(s)) for s in data]

def parse_args() -> object:
    """parse and process the commandline arguments"""

    parser = argparse.ArgumentParser(
        fromfile_prefix_chars="@",
        description="Control and interact with Broadlink devices.",
        formatter_class=argparse.RawTextHelpFormatter,
    )

    action_group = parser.add_argument_group("Actions", "Specify the action to perform.")
    action_group.add_argument("--sensors", dest="action", action="store_const",
                              const="sensors", help="Check all sensors")
    action_group.add_argument("--temperature", dest="action", action="store_const",
                              const="temperature", help="Request temperature from the device")
    action_group.add_argument("--humidity", dest="action", action="store_const",
                              const="humidity", help="Request humidity from the device")
    
    action_group.add_argument("--energy", dest="action", action="store_const",
                              const="energy", help="Request energy consumption from the device")
    action_group.add_argument("--check", dest="action", action="store_const",
                              const="check", help="Check current power state")
    action_group.add_argument("--checknl", dest="action", action="store_const",
                              const="checknl", help="Check current nightlight state")

    action_group.add_argument("--turnon", dest="action", action="store_const",
                              const="turnon", help="Turn on the device")
    action_group.add_argument("--turnoff", dest="action", action="store_const",
                              const="turnoff", help="Turn off the device")
    action_group.add_argument("--turnnlon", dest="action", action="store_const",
                              const="turnnlon", help="Turn on nightlight on the device")
    action_group.add_argument("--turnnloff", dest="action", action="store_const",
                              const="turnnloff", help="Turn off nightlight on the device")
    action_group.add_argument("--switch", dest="action", action="store_const",
                              const="switch", help="Switch state from on to off and off to on")

    action_group.add_argument("--send", dest="action", action="store_const",
                              const="send", help="Send command")

    action_group.add_argument("--discover", dest="action", action="store_const",
                              const="discover", help="Discover Broadlink devices on the local network")
    action_group.add_argument("--learn", dest="action", action="store_const",
                              const="irlearn", help="IR learning")
    action_group.add_argument("--rflearn", dest="action", action="store_const",
                              const="rflearn", help="RF scan learning")
    
    action_group.add_argument("--convert", dest="action", action="store_const",
                              const="convert", help="Convert input data to durations")

    parser.add_argument("--device", help="Device definition as 'type host mac'")
    parser.add_argument("--type", type=auto_int, default=DEFAULT_DEVICE, dest="devtype",
                        help="Type of device")
    parser.add_argument("--host", help="Host address")
    parser.add_argument("--mac", type=auto_hex,
                        help="MAC address (hex reverse), as used by python-broadlink library")
    parser.add_argument("--port", type=int, default=DEFAULT_PORT, help="Broadlink port")
    parser.add_argument("--timeout", type=int, default=DEFAULT_TIMEOUT,
                        help="The timeout period for actions")

    parser.add_argument("--joinwifi", nargs=2,
                        help="SSID and PASSPHRASE to configure Broadlink device with")

    parser.add_argument("--frequency", type=float, help="Specify radiofrequency for learning")
    parser.add_argument("--learnfile", help="Save learned command to a specified file")

    parser.add_argument("--durations", action="store_true",
                        help="Use durations in microseconds instead of Broadlink format")
    parser.add_argument("--json", action="store_true", default=False,
                        dest="json_out", help="Output in JSON format")
    parser.add_argument("data", nargs="*", help="Data to send or convert")

    args = parser.parse_args()

    if args.durations:
        args.data = pulses_to_data(parse_pulses(args.data))
    elif args.data:
        args.data = bytes.fromhex("".join(args.data))

    if args.device:
        values = args.device.split()
        args.devtype = int(values[0], 0)
        args.host = values[1]
        args.mac = bytearray.fromhex(values[2])

    if not args.action:
        parser.print_help()
        print("You must specify an action", file=sys.stderr)
        sys.exit(1)
    # Validation: Ensure device data is provided for actions that need it
    elif args.action not in ["convert", "discover"]:
        if not (args.device or (args.devtype and args.host and args.mac)):
            parser.error(
                f"For --{args.action} you must also specify --device "
                "or provide --devtype, --host, and --mac."
            )

    return args

def format_packet(data: object) -> dict:
    return {
        "raw": data.hex(),
        "base64": base64.b64encode(data).decode("ascii"),
        "pulses": format_pulses(data_to_pulses(data)),
    }

def write_learnfile(learnfile: str, durations: bool, packet: dict):
    if learnfile:
        print(f"Saving to {learnfile}", file=sys.stderr)
        with open(learnfile, "w", encoding="utf-8") as text_file:
            text_file.write(packet.pulse_fmt if durations else packet.raw_fmt)


def print_data(json_out: bool, data: any, sep: str=' '):
    if json_out:
        print(json.dumps(data, indent=4))
        return
    
    if isinstance(data, dict):
        data = [data]

    for key in data[0].keys():
        print(key, sep, end='')
    print()
    for item in data:
        for key in data[0].keys():
            print(item[key], sep, end='')
        print()

def discover_devices(json_out: bool, ip=None) -> int:
    try:
        print(f"Scanning { (ip + ' on ') if ip else '' }local network...", file=sys.stderr)
        devices = broadlink.discover(local_ip_address=ip)
        devices[0]
        for device in devices:
            print_data(json_out, { "devtype": device.devtype, "host": device.host[0], "mac": device.mac.hex() })
        return 0
    except Exception as e:
        print(f"Error in discover_devices: {e}", file=sys.stderr)
        return 1

def do_learn(json_out: bool, dev: object, learnfile: str, timeout: int, durations: bool) -> int:
    """Infrared learning"""

    dev.enter_learning()
    print("Awaiting infrared code...", file=sys.stderr)
    start = time.time()
    while time.time() - start < timeout:
        time.sleep(1)
        try:
            data = dev.check_data()
        except (ReadError, StorageError):
            continue
        else:
            break
    else:
        print("No data received...", file=sys.stderr)
        return 1

    print("Packet found!", file=sys.stderr)
    packet = format_packet(data)
    print_data(json_out, packet, sep=os.linesep)
    write_learnfile(learnfile, durations, packet)

    return 0

def do_rflearn(json_out: bool, dev: object, frequency: float, learnfile: str, timeout: int, durations: bool) -> int:
    """
    Radiofrequency learning
    """

    if frequency:
        print("Press the button you want to learn, a SHORT press...", file=sys.stderr)
    else:
        dev.sweep_frequency()
        print("Detecting radiofrequency, press and HOLD the button to learn...", file=sys.stderr)

        start = time.time()
        while time.time() - start < timeout:
            time.sleep(1)
            locked, frequency = dev.check_frequency()
            if locked:
                break
        else:
            print("Radiofrequency not found", file=sys.stderr)
            dev.cancel_sweep_frequency()
            return 1

        print(f"Radiofrequency detected: {frequency}MHz", file=sys.stderr)
        print("You can now LET GO of the button", file=sys.stderr)
        time.sleep(0.5)

        input("Press enter to continue...")
        print("Press the button again, now a SHORT press.", file=sys.stderr)

    dev.find_rf_packet(frequency)

    start = time.time()
    while time.time() - start < timeout:
        time.sleep(1)
        try:
            data = dev.check_data()
        except (ReadError, StorageError):
            continue
        else:
            break
    else:
        print("No data received...", file=sys.stderr)
        return 1

    print("Packet found!", file=sys.stderr)
    packet = format_packet(data)
    print_data(json_out, packet, sep=os.linesep)
    write_learnfile(learnfile, durations, packet)


def main() -> int:
    """Main function - execute the specified action"""
    args = parse_args()

    if args.host and args.mac and args.devtype:
        dev = broadlink.gendevice(args.devtype, (args.host, args.port), args.mac)
        dev.auth()

    try:
        match args.action:
            case "temperature":
                print_data(args.json_out, { "temperature": dev.check_temperature() })
            case "humidity":
                print_data(args.json_out, { "humidity": dev.check_humidity() })
            case "energy":
                print_data(args.json_out, { "energy": dev.get_energy()})
            case "sensors":
                print_data(args.json_out, dev.check_sensors() )
            case "check":
                print_data(args.json_out, { "power": dev.check_power() })
            case "checknl":
                print_data(args.json_out, { "nightlight": dev.check_nightlight() })

            case "turnon":
                dev.set_power(True)
                print_data(args.json_out, { "power": dev.check_power() })
            case "turnoff":
                dev.set_power(False)
                print_data(args.json_out, { "power": dev.check_power() })
            case "switch":
                dev.set_power(not dev.check_power())
                print_data(args.json_out, { "power": dev.check_nightlight() })

            case "turnnlon":
                dev.set_nightlight(True)
                print_data(args.json_out, { "nightlight": dev.check_nightlight() })
            case "turnnloff":
                dev.set_nightlight(False)
                print_data(args.json_out, { "nightlight": dev.check_nightlight() })
                
            case "send":
                dev.send_data(args.data)

            case "discover":
                return discover_devices(args.json_out, args.host)
            case "irlearn":
                return do_learn(args.json_out, dev, args.learnfile, args.timeout, args.durations)
            case "rflearn":
                return do_rflearn(args.json_out, dev, args.frequency, args.learnfile, args.timeout, args.durations)
            
            case "convert":
                print(data_to_pulses(bytearray.fromhex("".join(args.data))))

            case _:
                print(f"Unknown action: {args.action}")
                return 255
    except AttributeError as e:
        if hasattr(e.obj, 'TYPE'):
            print(f"Action {e.name} not supported by device {dev.TYPE} {dev.devtype}")
            return 2
        else:
            raise        

    return 0


sys.exit(main())
